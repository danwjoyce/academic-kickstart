params <- c( zeta = -0.1, eta = -0.5 )
times <- seq(1,100, by = 0.5)
soln.1 <- ode(y = c(y1 = 5, y2 = -2.5), func = OscDiffEq, times = times, parms = params)
# keep y1 and y2 (the second and first derivative respectively)
ex.osc <- data.frame(
X.1  = soln.1[,"y1"], # + rnorm( n, 0, 0.25),
dX.1 = soln.1[,"y2"],
Time = soln.1[,"time"]
)
p.x <- ggplot( ex.osc ) +
geom_line( aes( x = Time, y = X.1 ), colour = "#984ea3" ) +
annotate("point", x = 1, y = 5, size = 4, colour = "#984ea3") +
ylab(TeX("x(t)")) +
xlab(TeX("t")) +
ggtitle("Simulated Data: Damping") +
dwjtheme
p.phase <- ggplot( ex.osc ) +
geom_path( aes( x = X.1, y = dX.1 ), colour = "#984ea3" ) +
annotate("point", x = ex.osc$X.1[1], y = ex.osc$dX.1[1], size = 4, colour = "#984ea3") +
ylab("dx(t)") +
xlab("x(t)") +
ggtitle("Phase Plane: Damping") +
dwjtheme
grid.arrange( p.x, p.phase, ncol = 2)
tau <- 5
xt    <- ex.osc$X.1
xt.T  <- xt[ tau:length(xt) ]
xt.2T <- xt[ (2*tau):length(xt) ]
delay.df <- data.frame(
xt     = xt[1:length(xt.2T)],
xt.T   = xt.T[1:length(xt.2T)],
xt.2T  = xt.2T[1:length(xt.2T)]
)
ggplot( delay.df, aes( x = xt.T, y = xt.2T ) ) +
geom_path() +
dwjtheme
tau <- 2
n <- 3
X <- d$Sleep.Duration
X
plot( X )
tau <- 2
n <- 3
X <- lowess( x = seq(1,length(d$Sleep.Duration)), y = d$Sleep.Duration, f = 1/5 )$y
plot(X)
N       <- length( X )
max.len <- N - 2*d*tau
N
tau
n
2*d*tau
class( tau )
class( d )
N       <- length( X )
max.len <- N - 2*n*tau
N
max.len
dd <- matrix( NA, nrow = max.len, ncol = n)
dim( dd )
head( DD )
head( dd )
2*tau*n
N       <- length( X )
max.len <- N - 2*n*tau
dd <- matrix( NA, nrow = max.len, ncol = tau )
dim( d d)
dim( dd)
dd <- matrix( NA, nrow = max.len, ncol = n )
X[ 1:max.len ]
tau <- 2
n <- 3
X <- lowess( x = seq(1,length(d$Sleep.Duration)), y = d$Sleep.Duration, f = 1/5 )$y
X[ 1:max.len ]
plot( X )
dd[,1] <- X[ 1:max.len ]
head( dd )
i <- 2
N       <- length( X )
max.len <- N - 2*n*tau
dd <- matrix( NA, nrow = max.len, ncol = n )
dd[,1] <- X[ 1:max.len ]
for( i in 1:(n-1) ) {
dd[ , i+1 ] <- X[ (i*tau ):max.len ]
}
i
(i*tau ):max.len
length( (i*tau ):max.len )
max.len
N       <- length( X )
max.len <- (N - 2*n*tau) - 1
dd <- matrix( NA, nrow = max.len, ncol = n )
dd[,1] <- X[ 1:max.len ]
for( i in 1:(n-1) ) {
dd[ , i+1 ] <- X[ (i*tau ):max.len ]
}
i
X[ (i*tau ):max.len ]
length( X[ (i*tau ):max.len ] )
max.len
N       <- length( X )
max.len <- N - 2*n*tau
dd <- matrix( NA, nrow = max.len, ncol = n )
dd[,1] <- X[ 1:max.len ]
data("Nile", package = "datasets")
head( Nile )
str( Nile )
Nile
install.packages("dse")
require(dse)
rm( list = ls() )
reqd.packages <- c("ggplot2",
"ggrepel",
"reshape2",
"latex2exp",
"deSolve",
"kableExtra",
"minpack.lm",
"gridExtra",
"pracma",
"viridis")
# to install required packages
todo.packages <- reqd.packages[!(reqd.packages %in% installed.packages()[,"Package"])]
if(length(todo.packages) > 0) install.packages(todo.packages)
lapply(reqd.packages, require, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# globals for presentation
dwjtheme <- theme_minimal() +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
plot.title = element_text(size = rel(1.25), face = "bold", hjust = 0.5 ))
# get some data
d <- as.data.frame( read.csv( "../../../Trajectory/ex-data.csv") )
require(dse)
require(dse)
rm( list = ls() )
reqd.packages <- c("ggplot2",
"ggrepel",
"reshape2",
"latex2exp",
"deSolve",
"kableExtra",
"minpack.lm",
"gridExtra",
"pracma",
"viridis",
"dse")
# to install required packages
todo.packages <- reqd.packages[!(reqd.packages %in% installed.packages()[,"Package"])]
if(length(todo.packages) > 0) install.packages(todo.packages)
lapply(reqd.packages, require, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# globals for presentation
dwjtheme <- theme_minimal() +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
plot.title = element_text(size = rel(1.25), face = "bold", hjust = 0.5 ))
# get some data
d <- as.data.frame( read.csv( "../../../Trajectory/ex-data.csv") )
fileName <- system.file("otherdata", "eg1.dat", package="dse")
fileName
eg1.DSE.data <- t(matrix(scan(fileName),5, 364))[, 2:5]
head( eg1.DSE.data)
eg1.DSE.data <- TSdata(input= eg1.DSE.data[,1,drop = F],
output= eg1.DSE.data[, 2:4, drop = F])
head(output)
eg1.DSE.data
eg1.DSE.data$output
eg1.DSE.data <-tframed(eg1.DSE.data,
list(start=c(1961,3), frequency=12))
head( eg1.DSE.data)
seriesNamesInput(eg1.DSE.data) <- "R90"
seriesNamesOutput(eg1.DSE.data) <- c("M1","GDPl2", "CPI")
eg1.DSE.data$input
model1 <- estVARXls(eg1.DSE.data)
model2 <- estSSMittnik(eg1.DSE.data, n=4)
summary(model1)
tfplot(model1)
tfplot(model2)
summary(model2)
stability(model1)
tfplot(state(model1))
tfplot(state(model2))
state(model2)
state(model1)
quit()
rm( list = ls() )
reqd.packages <- c("ggplot2",
"ggrepel",
"reshape2",
"latex2exp",
"deSolve",
"kableExtra",
"minpack.lm",
"gridExtra",
"pracma",
"viridis",
"dse")
# to install required packages
todo.packages <- reqd.packages[!(reqd.packages %in% installed.packages()[,"Package"])]
if(length(todo.packages) > 0) install.packages(todo.packages)
lapply(reqd.packages, require, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# globals for presentation
dwjtheme <- theme_minimal() +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
plot.title = element_text(size = rel(1.25), face = "bold", hjust = 0.5 ))
# get some data
d <- as.data.frame( read.csv( "../../../Trajectory/ex-data.csv") )
require(dse)
fileName <- system.file("otherdata", "eg1.dat", package="dse")
eg1.DSE.data <- t(matrix(scan(fileName),5, 364))[, 2:5]
source('~/.active-rstudio-document', echo=TRUE)
rm( list = ls() )
reqd.packages <- c("ggplot2",
"ggrepel",
"reshape2",
"latex2exp",
"deSolve",
"kableExtra",
"minpack.lm",
"gridExtra",
"pracma",
"viridis",
"dse")
# to install required packages
todo.packages <- reqd.packages[!(reqd.packages %in% installed.packages()[,"Package"])]
if(length(todo.packages) > 0) install.packages(todo.packages)
lapply(reqd.packages, require, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# globals for presentation
dwjtheme <- theme_minimal() +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
plot.title = element_text(size = rel(1.25), face = "bold", hjust = 0.5 ))
# get some data
d <- as.data.frame( read.csv( "../../../Trajectory/ex-data.csv") )
install.packages(blogdown)
install.packages("blogdown")
rm( list = ls() )
reqd.packages <- c("ggplot2",
"ggrepel",
"reshape2",
"latex2exp",
"deSolve",
"kableExtra",
"minpack.lm",
"gridExtra",
"pracma",
"viridis",
"dse",
"blogdown")
# to install required packages
todo.packages <- reqd.packages[!(reqd.packages %in% installed.packages()[,"Package"])]
if(length(todo.packages) > 0) install.packages(todo.packages)
lapply(reqd.packages, require, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# globals for presentation
dwjtheme <- theme_minimal() +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
plot.title = element_text(size = rel(1.25), face = "bold", hjust = 0.5 ))
# get some data
d <- as.data.frame( read.csv( "../../../Trajectory/ex-data.csv") )
# Direct implementation
OscDiffEq <- function (t, y, params) {
zeta <- params["zeta"]
eta  <- params["eta"]
list(
c( y[2],
zeta * y[2] + eta * y[1]
)
)
}
actual.zeta <- -0.1
actual.eta  <- -0.5
params <- c( zeta = -0.1, eta = -0.5 )
times <- seq(1,100, by = 0.5)
soln.1 <- ode(y = c(y1 = 5, y2 = -2.5), func = OscDiffEq, times = times, parms = params)
# keep y1 and y2 (the second and first derivative respectively)
ex.osc <- data.frame(
X.1  = soln.1[,"y1"], # + rnorm( n, 0, 0.25),
dX.1 = soln.1[,"y2"],
Time = soln.1[,"time"]
)
p.x <- ggplot( ex.osc ) +
geom_line( aes( x = Time, y = X.1 ), colour = "#984ea3" ) +
annotate("point", x = 1, y = 5, size = 4, colour = "#984ea3") +
ylab(TeX("x(t)")) +
xlab(TeX("t")) +
ggtitle("Simulated Data: Damping") +
dwjtheme
p.phase <- ggplot( ex.osc ) +
geom_path( aes( x = X.1, y = dX.1 ), colour = "#984ea3" ) +
annotate("point", x = ex.osc$X.1[1], y = ex.osc$dX.1[1], size = 4, colour = "#984ea3") +
ylab("dx(t)") +
xlab("x(t)") +
ggtitle("Phase Plane: Damping") +
dwjtheme
grid.arrange( p.x, p.phase, ncol = 2)
unlink('content/post/2019-05-12-trajectories-part-two_cache', recursive = TRUE)
rm( list = ls() )
reqd.packages <- c("ggplot2",
"ggrepel",
"reshape2",
"latex2exp",
"deSolve",
"kableExtra",
"minpack.lm",
"gridExtra",
"pracma",
"viridis",
"dse",
"blogdown")
# to install required packages
todo.packages <- reqd.packages[!(reqd.packages %in% installed.packages()[,"Package"])]
if(length(todo.packages) > 0) install.packages(todo.packages)
lapply(reqd.packages, require, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# globals for presentation
dwjtheme <- theme_minimal() +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
plot.title = element_text(size = rel(1.25), face = "bold", hjust = 0.5 ))
# get some data
d <- as.data.frame( read.csv( "../../../Trajectory/ex-data.csv") )
require(dse)
fileName <- system.file("otherdata", "eg1.dat", package="dse")
eg1.DSE.data <- t(matrix(scan(fileName),5, 364))[, 2:5]
# convert to dse based TS object
eg1.DSE.data <- TSdata(input= eg1.DSE.data[,1,drop = F],
output= eg1.DSE.data[, 2:4, drop = F])
# tidy time labels
eg1.DSE.data <-tframed(eg1.DSE.data,
list(start=c(1961,3), frequency=12))
seriesNamesInput(eg1.DSE.data) <- "R90"
seriesNamesOutput(eg1.DSE.data) <- c("M1","GDPl2", "CPI")
# run model estimation
model1 <- estVARXls(eg1.DSE.data)
model2 <- estSSMittnik(eg1.DSE.data, n=4)
LocalLinearGradient <- function( F ) {
# compute local linear numerical approximation to gradient of F with window +/- 1
N <- length(F)
dF <- rep(NA, N)
for( i in 2:(N-1) ) {
dF[i] <- ( F[i+1] - F[i-1] ) / 2
}
# boundary cases
dF[1] <- (F[2] - F[1])
dF[N] <- (F[N] - F[N-1])
return( dF )
}
# Direct implementation
OscDiffEq <- function (t, y, params) {
zeta <- params["zeta"]
eta  <- params["eta"]
list(
c( y[2],
zeta * y[2] + eta * y[1]
)
)
}
actual.zeta <- -0.1
actual.eta  <- -0.5
params <- c( zeta = -0.1, eta = -0.5 )
times <- seq(1,100, by = 0.5)
soln.1 <- ode(y = c(y1 = 5, y2 = -2.5), func = OscDiffEq, times = times, parms = params)
# keep y1 and y2 (the second and first derivative respectively)
ex.osc <- data.frame(
X.1  = soln.1[,"y1"], # + rnorm( n, 0, 0.25),
dX.1 = soln.1[,"y2"],
Time = soln.1[,"time"]
)
p.x <- ggplot( ex.osc ) +
geom_line( aes( x = Time, y = X.1 ), colour = "#984ea3" ) +
annotate("point", x = 1, y = 5, size = 4, colour = "#984ea3") +
ylab(TeX("x(t)")) +
xlab(TeX("t")) +
ggtitle("Simulated Data: Damping") +
dwjtheme
p.phase <- ggplot( ex.osc ) +
geom_path( aes( x = X.1, y = dX.1 ), colour = "#984ea3" ) +
annotate("point", x = ex.osc$X.1[1], y = ex.osc$dX.1[1], size = 4, colour = "#984ea3") +
ylab("dx(t)") +
xlab("x(t)") +
ggtitle("Phase Plane: Damping") +
dwjtheme
grid.arrange( p.x, p.phase, ncol = 2)
tau <- 5
xt    <- ex.osc$X.1
xt.T  <- xt[ tau:length(xt) ]
xt.2T <- xt[ (2*tau):length(xt) ]
delay.df <- data.frame(
xt     = xt[1:length(xt.2T)],
xt.T   = xt.T[1:length(xt.2T)],
xt.2T  = xt.2T[1:length(xt.2T)]
)
ggplot( delay.df, aes( x = xt.T, y = xt.2T ) ) +
geom_path() +
dwjtheme
tau <- 2
n <- 3
X <- lowess( x = seq(1,length(d$Sleep.Duration)), y = d$Sleep.Duration, f = 1/5 )$y
require(blogdown)
blogdown::build_site()
blogdown::serve_site()
servr::daemon_stop(1)
require(dse)
View(dse::estSSMittnik())
View(dse::estSSMittnik
)
?dse
plot( log( seq(1,100)))
quit()
rm( list = ls() )
reqd.packages <- c("ggplot2",
"ggrepel",
"reshape2",
"latex2exp",
"deSolve",
"kableExtra",
"minpack.lm",
"gridExtra",
"pracma",
"viridis",
"dse",
"blogdown")
# to install required packages
todo.packages <- reqd.packages[!(reqd.packages %in% installed.packages()[,"Package"])]
if(length(todo.packages) > 0) install.packages(todo.packages)
lapply(reqd.packages, require, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# globals for presentation
dwjtheme <- theme_minimal() +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
plot.title = element_text(size = rel(1.25), face = "bold", hjust = 0.5 ))
# get some data
d <- as.data.frame( read.csv( "../../../Trajectory/ex-data.csv") )
rm( list = ls() )
reqd.packages <- c("ggplot2",
"ggrepel",
"reshape2",
"latex2exp",
"deSolve",
"kableExtra",
"minpack.lm",
"gridExtra",
"pracma",
"viridis",
"dse",
"depmixS4",
"blogdown")
# to install required packages
todo.packages <- reqd.packages[!(reqd.packages %in% installed.packages()[,"Package"])]
if(length(todo.packages) > 0) install.packages(todo.packages)
lapply(reqd.packages, require, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# globals for presentation
dwjtheme <- theme_minimal() +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 12),
plot.title = element_text(size = rel(1.25), face = "bold", hjust = 0.5 ))
# get some data
d <- as.data.frame( read.csv( "../../../Trajectory/ex-data.csv") )
require( depmixS4 )
data("speed")
head( speed )
data("speed")
set.seed(1)
mod <- depmix(response = rt ~ 1, data = speed, nstates = 2,+    trstart = runif(4))
mod <- depmix(response = rt ~ 1, data = speed, nstates = 2, trstart = runif(4))
mod
fm <- fit(mod, emc=em.control(rand=FALSE))
summary(fit)
summary(fm
)
mod <- depmix(list(rt ~ 1,corr ~ 1), data = speed, nstates = 2,
family = list(gaussian(), multinomial("identity")),
transition = ~ scale(Pacc),
instart = runif(2))
fm <- fit(mod, verbose = FALSE, emc=em.control(rand=FALSE))
fm
summary(fm)
head( speed )
scale( speed$Pacc )
range( speed$Pacc )
hist( speed$rt )
require(blogdown)
install.packages("blogdown")
require(blogdown)
blogdown:::new_post_addin()
blogdown::build_site()
blogdown::serve_site()
servr::daemon_stop()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::build_site()
require(blogdown)
blogdown::build_site()
getwd()
blogdown::build_site()
blogdown::serve_site()
servr::daemon_stop()
quit()
require(blogdown)
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
