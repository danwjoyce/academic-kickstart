"0","ComputeResid <- function(current.params){"
"0","# This function wraps:"
"0","#  -- a) solving the ODEs for a set of parameters (current.params) provided by an optimiser"
"0","#  -- b) computing the residuals (as mean square error) from solving/integrating the ODEs compared to the actual data"
"0","# This function is then passed to an optimiser of our choice"
"0"," # Known initial values for the ODEs -- these could be extracted from and remain"
"0"," # constant for any individual -- time series data"
"0"," # == inital state (displacement, velocity)"
"0"," initial.state <- c(y1 = 5, y2 = -2.5)"
"0"," "
"0"," times <- seq(1,100, by = 1) "
"0"," # solve ODE for the current set of parameters"
"0"," soln <- ode( y = initial.state,"
"0","          times=times,"
"0","          func=OscDiffEq,"
"0","          parms=current.params)"
"0"," "
"0"," "
"0"," "
"0"," # compute and return residuals between output from ODE and actual observed data in df (== ex.osc)"
"0"," return( soln[,""y1""]-df$x )"
"0","}"
"0","require(minpack.lm)"
"0","# where to start the parameter search"
"0","initial.estimate.zeta <- 0.5"
"0","initial.estimate.eta  <- -0.5"
"0","params <- c( zeta = initial.estimate.zeta, eta = initial.estimate.eta )"
"0","# fitting"
"0","fitval=nls.lm(par=params,fn=ComputeResid)"
