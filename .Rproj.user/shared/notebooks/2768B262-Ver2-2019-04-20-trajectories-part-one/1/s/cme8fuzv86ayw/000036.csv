"0","# Compute numerical approximations of gradients"
"0","# - first deriv"
"0","df$dx1 <- LocalLinearGradient( df$smooth )"
"0","# - second deriv"
"0","df$dx2 <- LocalLinearGradient( LocalLinearGradient( df$smooth ) )"
"0","# where to start the parameter search"
"0","initial.estimate.zeta <- -1.0"
"0","initial.estimate.eta  <- -1.0"
"0","params <- c( zeta = initial.estimate.zeta, eta = initial.estimate.eta )"
"0","# fitting"
"0","nls.fit <- nls.lm(par=params,fn=ComputeResid, "
"0","                  initial.values = c(y1 = df$smooth[1], y2 = df$dx1[1]), "
"0","                  times = df$time,"
"0","                  observed = df$smooth)"
"0","# reconstruct"
"0","soln <- ode(y = c(y1 = df$smooth[1], y2 = df$dx1[1]), "
"0","                  func = OscDiffEq, "
"0","                  times = df$time, "
"0","                  parms = c( zeta = as.numeric( nls.fit$par[""zeta""] ), "
"0","                             eta =  as.numeric( nls.fit$par[""eta""] ) )"
"0",")"
"0","df$recon.X <- soln[,""y1""]"
"0","ggplot() +"
"0","   geom_point( data = df, aes( x = time, y = smooth ), colour = ""gray50"", size = 2 ) + "
"0","   geom_line( data = df, aes( x = time, y = smooth ), colour = ""gray50"" ) +"
"0"," "
"0","   geom_point( data = df, aes( x = time, y = recon.X ), colour = ""red"", size = 2 ) + "
"0","   geom_line( data = df, aes( x = time, y = recon.X ), colour = ""red"" ) +"
"0","   "
"0","   ylab(TeX(""x(t)"")) +"
"0","   xlab(TeX(""t"")) + "
"0","   ggtitle(""Sleep Data + LM Fit"") +"
"0","   dwjtheme"
